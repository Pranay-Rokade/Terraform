# This file contains the configuration for creating an EC2 instance, a key pair, a default VPC, and a security group in AWS using Terraform.

# key pair Login
resource "aws_key_pair" "deployer" {
    key_name = "terraform-ec2-key"
    public_key = file("terraform-ec2-key.pub")
}

# VPC: This resource creates a default VPC in the specified AWS region.
resource "aws_default_vpc" "default" {

}

# Security Group: This resource creates a security group.
resource "aws_security_group" "my_sg" {
    name = "${var.environment}automated_security_group"
    description = "This will add a security group generated by terraform"
    vpc_id = aws_default_vpc.default.id #interpolation

    #Inbound Rules
    ingress {
        description = "port 22 allow"
        from_port = 22
        to_port = 22
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        description = "port 80 allow"
        from_port = 80
        to_port = 80
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        description = "port 443 allow"
        from_port = 443
        to_port = 443
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
    
    #Outbound Rules
    egress {
        description = " allow all outgoing traffic "
        from_port = 0
        to_port = 0
        protocol = "-1" # -1 means all protocols
        cidr_blocks = ["0.0.0.0/0"]
    }
    tags = {
        Name = "mysecuritygroup"
    }
}

# EC2 Instance: This resource creates an EC2 instance.
resource "aws_instance" "my_ec2" {
    for_each = tomap({
        instance1 = "t2.micro",
        instance2 = "t2.nano"
    }) # meta-argument for_each
    #count = 2 # meta-argument count

    depends_on = [aws_security_group.my_sg, 
                  aws_key_pair.deployer, 
                  aws_default_vpc.default] # meta-argument dependency management
    
    ami = var.ami_id
    instance_type = each.value
    key_name = aws_key_pair.deployer.key_name
    security_groups = [aws_security_group.my_sg.name]
    user_data = file("install_nginx.sh")
    
    root_block_device {
        volume_size = var.environment == "production" ? 30 : var.default_root_volume_size
        volume_type = "gp3"
    }

    tags = {
        Name = each.key
        Environment = var.environment
    }
}